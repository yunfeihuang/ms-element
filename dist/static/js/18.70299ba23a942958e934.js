(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{YOVQ:function(t,n,a){"use strict";a.r(n);var e=a("ToIM"),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("section",[a("details",[a("summary",[t._v("将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action")]),t._v(" "),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":""}},[t._v("#store/module/user.js\n// state\nlet state = {\n  list: []\n}\n\n// actions\nconst actions = {\n  list ({ commit, state }, params) { // 获取用户列表\n    let data = []\n    for (let i = 0; i < 10; i++) { // 模拟请求接口数据\n      data.push(Math.random())\n    }\n    commit('LIST', {\n      params: params,\n      data: data\n    })\n  }\n}\n// mutations\nconst mutations = {\n  LIST (state, { data }) {\n    state.list = data\n  }\n}\n\nexport default {\n  namespaced: true, // namespaced设置为true是关键点\n  state,\n  actions,\n  mutations\n}\n\n# vue组件层\nimport { mapState } from 'vuex'\nexport default () {\n  computed: {\n    ...mapState({\n      list: state => state.user.list\n    })\n  },\n  mounted () {\n    this.dispatch('user/list') // 触发action\n    // this.commit('user/LIST') 触发mutations\n  }\n}\n\n#参考资料：https://vuex.vuejs.org/zh-cn/modules.html\n")])])]),t._v(" "),a("details",[a("summary",[t._v("解决store dispatch后获取更新后的数据方案，当然也可以用watch方案")]),t._v(" "),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":""}},[t._v("import api from 'api'\n// state\nlet state = {\n  list: []\n}\n\n// actions\nconst actions = {\n  list ({ commit, state }, params) { // 获取用户列表\n    return api.getList().then((data) => { // action要返回Promise dispatch就可以使用then方法\n      commit('LIST', {\n        params: params,\n        data: data\n      })\n    })\n  }\n}\n// mutations\nconst mutations = {\n  LIST (state, { data }) {\n    console.log('into mutations')\n    state.list = data\n  }\n}\n\nexport default {\n  namespaced: true, // namespaced设置为true是关键点\n  state,\n  actions,\n  mutations\n}\n\n# vue组件层\nimport { mapState } from 'vuex'\nexport default () {\n  computed: {\n    ...mapState({\n      list: state => state.user.list\n    })\n  },\n  mounted () {\n    this.dispatch('user/list').then(() => {\n      console.log('into dispatch then', this.$store.state.user.list)\n    })\n    #console打印结果：先\"into mutations\"，后\"into dispatch then\"\n  }\n}\n\n")])])]),t._v(" "),a("details",[a("summary",[t._v("后台接口返回数据处理要store层去完成，要减少vue computed,filter,watch去处理数据，往视图层与业务层分离的原则上开发,Vue视图层只做渲染")]),t._v(" "),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":""}},[t._v("bad:\n#store层\nimport api from 'api'\n// state\nlet state = {\n  list: []\n}\n\n// actions\nconst actions = {\n  list ({ commit, state }, params) { // 获取用户列表\n    return api.getList().then((data) => {\n      commit('LIST', {\n        params: params,\n        data: data\n      })\n    })\n  }\n}\n// mutations\nconst mutations = {\n  LIST (state, { data }) {\n    state.list = data\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations\n}\n\n#vue层\nimport { mapState } from 'vuex'\nexport default () {\n  computed: {\n    ...mapState({\n      list: state => state.user.list\n    })\n  },\n  watch: {\n    list (value) {\n      value.forEach(item => {  // 处理返回的数据\n        let fullName = '未知'\n        if (item.firstName && item.lastName) {\n          fullName = item.firstName + item.lastName // 处理完整姓名\n        }\n        item.fullName = fullName\n      })\n    }\n  },\n  mounted () {\n    this.dispatch('user/list')\n  }\n}\n\ngood:\n#store层\nimport api from 'api'\n// state\nlet state = {\n  list: []\n}\n\n// actions\nconst actions = {\n  list ({ commit, state }, params) { // 获取用户列表\n    return api.getList().then((data) => {\n      commit('LIST', {\n        params: params,\n        data: data\n      })\n    })\n  }\n}\n// mutations\nconst mutations = {\n  LIST (state, { data }) {\n    data.forEach(item => { // 处理返回的数据\n      let fullName = '未知'\n      if (item.firstName && item.lastName) {\n        fullName = item.firstName + item.lastName // 处理完整姓名\n      }\n      item.fullName = fullName\n    })\n    state.list = data\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations\n}\n\n#vue层\nimport { mapState } from 'vuex'\nexport default () {\n  computed: {\n    ...mapState({\n      list: state => state.user.list\n    })\n  },\n  mounted () {\n    this.dispatch('user/list')\n  }\n}\n\n")])])]),t._v(" "),a("details",[a("summary",[t._v("store单向数据流与表单双向数据流的处理")]),t._v(" "),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":""}},[t._v("import { mapState } from 'vuex'\nexport default () {\n  data () {\n    return {\n      form: {} // 存储表单字段\n    }\n  },\n  computed: {\n    ...mapState({\n      info: state => state.user.info\n    })\n  },\n  mounted () {\n    this.dispatch('user/info').then(() => { // 使用then方法记得在action里返回一个Promise对象\n      this.form = {...this.$store.state.user.info} // 把store的用户信息复制一份到form里以便使用双向数据绑定\n    })\n  }\n}\n")])])])])}],!1,null,null,null);n.default=s.exports}}]);